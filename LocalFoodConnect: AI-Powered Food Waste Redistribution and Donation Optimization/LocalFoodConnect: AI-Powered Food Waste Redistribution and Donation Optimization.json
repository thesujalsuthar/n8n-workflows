{
  "name": "AI-Driven Local Food Waste Redistribution and Donation Optimization Workflow",
  "nodes": [
    {
      "parameters": {
        "functionCode": "/*\nSimulate fetching surplus food data from local businesses.\nIn a real workflow, replace this with API calls or database queries.\n*/\nreturn [\n  {\n    json: {\n      businessId: \"biz_001\",\n      businessName: \"Fresh Farm Market\",\n      surplusItems: [\n        { itemId: \"item_apple\", name: \"Apples\", quantity: 50, expiration: \"2024-06-10T09:00:00Z\" },\n        { itemId: \"item_bread\", name: \"Bread Loaves\", quantity: 30, expiration: \"2024-06-09T15:00:00Z\" }\n      ],\n      location: { lat: 40.7128, lon: -74.006 }\n    }\n  },\n  {\n    json: {\n      businessId: \"biz_002\",\n      businessName: \"Green Grocer\",\n      surplusItems: [\n        { itemId: \"item_carrot\", name: \"Carrots\", quantity: 20, expiration: \"2024-06-11T12:00:00Z\" }\n      ],\n      location: { lat: 40.715, lon: -74.002 }\n    }\n  }\n];"
      },
      "name": "Fetch Surplus Food Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "/*\nSimulate fetching charity and food bank data.\nIn real use, replace with API/database retrieval.\n*/\nreturn [\n  {\n    json: {\n      charityId: \"char_001\",\n      charityName: \"Helping Hands Food Bank\",\n      needs: [\"Apples\", \"Bread Loaves\", \"Carrots\"],\n      location: { lat: 40.7135, lon: -74.007 }\n    }\n  },\n  {\n    json: {\n      charityId: \"char_002\",\n      charityName: \"Hope Charity\",\n      needs: [\"Bread Loaves\"],\n      location: { lat: 40.710, lon: -74.005 }\n    }\n  }\n];"
      },
      "name": "Fetch Charity Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        250,
        550
      ]
    },
    {
      "parameters": {
        "functionCode": "/*\nMatch surplus items to nearby charities based on item needs and proximity.\n*/\nconst surplusData = $items(\"Fetch Surplus Food Data\");\nconst charityData = $items(\"Fetch Charity Data\");\n\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const toRad = (v) => (v * Math.PI) / 180;\n  const R = 6371; // Earth radius km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nconst matches = [];\n\nfor (const surplusEntry of surplusData) {\n  const surplus = surplusEntry.json;\n\n  for (const item of surplus.surplusItems) {\n    for (const charityEntry of charityData) {\n      const charity = charityEntry.json;\n\n      // Check if charity needs this item\n      if (charity.needs.includes(item.name)) {\n        // Calculate distance\n        const distance = haversineDistance(\n          surplus.location.lat,\n          surplus.location.lon,\n          charity.location.lat,\n          charity.location.lon\n        );\n\n        // Consider charities within 5km radius\n        if (distance <= 5) {\n          matches.push({\n            surplusBusinessId: surplus.businessId,\n            surplusBusinessName: surplus.businessName,\n            itemId: item.itemId,\n            itemName: item.name,\n            quantity: item.quantity,\n            expiration: item.expiration,\n            charityId: charity.charityId,\n            charityName: charity.charityName,\n            distanceKm: distance\n          });\n        }\n      }\n    }\n  }\n}\n\nreturn matches.map(match => ({ json: match }));"
      },
      "name": "Match Surplus to Charities",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        550,
        400
      ],
      "notesInFlow": true,
      "notes": "Matches surplus food items with charities that need them and are nearby (within 5km)."
    },
    {
      "parameters": {
        "functionCode": "/*\nOptimize donation schedule based on expiration dates (earliest expiration first) and distance (closest first).\n*/\nconst matches = $input.all();\n\nmatches.sort((a, b) => {\n  // Sort by expiration date ascending\n  const dateA = new Date(a.json.expiration);\n  const dateB = new Date(b.json.expiration);\n  if (dateA < dateB) return -1;\n  if (dateA > dateB) return 1;\n\n  // If same expiration, sort by distance ascending\n  return a.json.distanceKm - b.json.distanceKm;\n});\n\n// Assign pickup schedule: earliest possible, assume immediate pickup.\n// For demonstration, schedule pickups at intervals of 30 minutes starting now.\nconst schedule = [];\nconst now = new Date();\n\nmatches.forEach((match, index) => {\n  const pickupTime = new Date(now.getTime() + index * 30 * 60000).toISOString();\n  schedule.push({\n    ...match.json,\n    scheduledPickupTime: pickupTime\n  });\n});\n\nreturn schedule.map(s => ({ json: s }));"
      },
      "name": "Optimize Donation Schedule",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        850,
        400
      ],
      "notesInFlow": true,
      "notes": "Sort matches by expiration and distance, then generate donation pickup schedule."
    },
    {
      "parameters": {
        "fromEmail": "notifications@waste-redistribution.local",
        "toEmail": "={{$json.surplusBusinessName + ' <business_contact@example.com>'}}",
        "subject": "Donation Pickup Scheduled for Surplus Food: {{$json.itemName}}",
        "text": "Hello {{$json.surplusBusinessName}},\n\nYour surplus food item \"{{$json.itemName}}\" has been scheduled for pickup by {{$json.charityName}}.\n\nPickup details:\n- Quantity: {{$json.quantity}}\n- Scheduled Pickup Time: {{$json.scheduledPickupTime}}\n- Recipient: {{$json.charityName}}\n\nThank you for helping reduce food waste!\n\nBest regards,\nLocal Food Waste Redistribution Team"
      },
      "name": "Notify Surplus Business",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1150,
        300
      ]
    },
    {
      "parameters": {
        "fromEmail": "notifications@waste-redistribution.local",
        "toEmail": "={{$json.charityName + ' <charity_contact@example.com>'}}",
        "subject": "Donation Pickup Scheduled: {{$json.itemName}} from {{$json.surplusBusinessName}}",
        "text": "Hello {{$json.charityName}},\n\nA donation pickup for item \"{{$json.itemName}}\" has been scheduled.\n\nPickup details:\n- Quantity: {{$json.quantity}}\n- Scheduled Pickup Time: {{$json.scheduledPickupTime}}\n- Donor: {{$json.surplusBusinessName}}\n\nPlease make arrangements to receive the donation.\n\nThank you for your important work!\n\nBest regards,\nLocal Food Waste Redistribution Team"
      },
      "name": "Notify Charity",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1150,
        500
      ]
    }
  ],
  "connections": {
    "Fetch Surplus Food Data": {
      "main": [
        [
          {
            "node": "Match Surplus to Charities",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Charity Data": {
      "main": [
        [
          {
            "node": "Match Surplus to Charities",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Match Surplus to Charities": {
      "main": [
        [
          {
            "node": "Optimize Donation Schedule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Donation Schedule": {
      "main": [
        [
          {
            "node": "Notify Surplus Business",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify Charity",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "1"
}